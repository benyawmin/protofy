// Mocks generated by Mockito 5.4.2 from annotations
// in Goodbytz/test/features/number_trivia/data/repositories/repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:Goodbytz/core/network/network_info.dart' as _i6;
import 'package:Goodbytz/features/order_pickup/data/datasources/local_data_source.dart'
    as _i5;
import 'package:Goodbytz/features/order_pickup/data/datasources/remote_data_source.dart'
    as _i3;
import 'package:Goodbytz/features/order_pickup/data/models/order_data_model.dart'
    as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeOrderDataModel_0 extends _i1.SmartFake
    implements _i2.OrderDataModel {
  _FakeOrderDataModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i3.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.OrderDataModel> getOrderData(String? orderId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getOrderData,
          [orderId],
        ),
        returnValue: _i4.Future<_i2.OrderDataModel>.value(_FakeOrderDataModel_0(
          this,
          Invocation.method(
            #getOrderData,
            [orderId],
          ),
        )),
      ) as _i4.Future<_i2.OrderDataModel>);
}

/// A class which mocks [LocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDataSource extends _i1.Mock implements _i5.LocalDataSource {
  MockLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.OrderDataModel> getCachedOrderData() => (super.noSuchMethod(
        Invocation.method(
          #getCachedOrderData,
          [],
        ),
        returnValue: _i4.Future<_i2.OrderDataModel>.value(_FakeOrderDataModel_0(
          this,
          Invocation.method(
            #getCachedOrderData,
            [],
          ),
        )),
      ) as _i4.Future<_i2.OrderDataModel>);
  @override
  _i4.Future<void> cacheOrderData(_i2.OrderDataModel? tokenToCache) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheOrderData,
          [tokenToCache],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [NetworkInfo].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkInfo extends _i1.Mock implements _i6.NetworkInfo {
  MockNetworkInfo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}
